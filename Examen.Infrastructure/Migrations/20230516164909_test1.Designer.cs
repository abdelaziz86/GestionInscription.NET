// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamenContext))]
    [Migration("20230516164909_test1")]
    partial class test1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Inscription", b =>
                {
                    b.Property<int>("ParticipantFK")
                        .HasColumnType("int");

                    b.Property<int>("SeminiareFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateInscription")
                        .HasColumnType("datetime2");

                    b.Property<double>("tauxReduction")
                        .HasColumnType("float");

                    b.HasKey("ParticipantFK", "SeminiareFK", "dateInscription");

                    b.HasIndex("SeminiareFK");

                    b.ToTable("Inscriptions");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Participant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("TypeParticipant")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("numeroTelephone")
                        .HasColumnType("int");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("id");

                    b.ToTable("Participants");

                    b.HasDiscriminator<string>("TypeParticipant").HasValue("P");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Seminaire", b =>
                {
                    b.Property<int>("code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("code"));

                    b.Property<DateTime>("dateSeminaire")
                        .HasColumnType("datetime2");

                    b.Property<string>("intitule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("lieu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("nombreMaximal")
                        .HasColumnType("int");

                    b.Property<double>("tarif")
                        .HasColumnType("float");

                    b.HasKey("code");

                    b.ToTable("Seminaires");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Specialite", b =>
                {
                    b.Property<int>("specialiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("specialiteId"));

                    b.Property<string>("abreviation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("specialiteId");

                    b.ToTable("Specialites");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Industriel", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Participant");

                    b.Property<string>("fonction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("nomEntreprise")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasDiscriminator().HasValue("I");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Universitaire", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Participant");

                    b.Property<int>("SpecialiteFK")
                        .HasColumnType("int");

                    b.Property<string>("niveau")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("nomInstitut")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasIndex("SpecialiteFK");

                    b.HasDiscriminator().HasValue("U");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Inscription", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Participant", "Participant")
                        .WithMany("Inscriptions")
                        .HasForeignKey("ParticipantFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Seminaire", "Seminaire")
                        .WithMany("Inscriptions")
                        .HasForeignKey("SeminiareFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Seminaire");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Universitaire", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Specialite", "Specialite")
                        .WithMany("Universitaires")
                        .HasForeignKey("SpecialiteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialite");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Participant", b =>
                {
                    b.Navigation("Inscriptions");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Seminaire", b =>
                {
                    b.Navigation("Inscriptions");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Specialite", b =>
                {
                    b.Navigation("Universitaires");
                });
#pragma warning restore 612, 618
        }
    }
}
